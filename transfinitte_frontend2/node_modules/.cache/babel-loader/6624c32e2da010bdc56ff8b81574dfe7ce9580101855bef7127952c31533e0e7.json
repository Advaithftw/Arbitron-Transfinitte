{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sakth\\\\OneDrive\\\\Desktop\\\\Documents\\\\transfinitte_frontend\\\\src\\\\containers\\\\features\\\\ExcelTable.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport * as XLSX from 'xlsx';\nimport './ExcelTable.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExcelTable = () => {\n  _s();\n  const [columns, setColumns] = useState([]);\n  const [rows, setRows] = useState([]);\n  const handleLoadData = async () => {\n    try {\n      const response = await axios.get('http://localhost:5001/excel', {\n        responseType: 'blob'\n      });\n      const fileBlob = new Blob([response.data]);\n      const reader = new FileReader();\n      reader.onload = event => {\n        const binaryStr = event.target.result;\n        const workbook = XLSX.read(binaryStr, {\n          type: 'binary'\n        });\n        const sheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[sheetName];\n        const jsonData = XLSX.utils.sheet_to_json(worksheet, {\n          header: 1\n        });\n        setColumns(jsonData[0]);\n        setRows(jsonData.slice(1));\n      };\n      reader.readAsBinaryString(fileBlob);\n    } catch (error) {\n      console.error('Error loading Excel file:', error);\n      alert('Failed to load Excel file. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gpt3__whatgpt3 section__margin\",\n      id: \"wgpt3\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        class: \"font\",\n        children: \"Load Excel Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLoadData,\n        class: \"button\",\n        children: \"Load Data from Excel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), rows.length > 0 && /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"excel-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: columns.map((col, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n              children: col\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: rows.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: row.map((cell, cellIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n              children: cell\n            }, cellIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 21\n            }, this))\n          }, rowIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(ExcelTable, \"RQNKPF5yPTMlIcV115PhRYrjslI=\");\n_c = ExcelTable;\nexport default ExcelTable;\nvar _c;\n$RefreshReg$(_c, \"ExcelTable\");","map":{"version":3,"names":["React","useState","axios","XLSX","jsxDEV","_jsxDEV","ExcelTable","_s","columns","setColumns","rows","setRows","handleLoadData","response","get","responseType","fileBlob","Blob","data","reader","FileReader","onload","event","binaryStr","target","result","workbook","read","type","sheetName","SheetNames","worksheet","Sheets","jsonData","utils","sheet_to_json","header","slice","readAsBinaryString","error","console","alert","children","className","id","class","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","map","col","index","row","rowIndex","cell","cellIndex","_c","$RefreshReg$"],"sources":["C:/Users/sakth/OneDrive/Desktop/Documents/transfinitte_frontend/src/containers/features/ExcelTable.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport * as XLSX from 'xlsx';\r\nimport './ExcelTable.css'; \r\n\r\nconst ExcelTable = () => {\r\n  const [columns, setColumns] = useState([]);\r\n  const [rows, setRows] = useState([]);\r\n\r\n  const handleLoadData = async () => {\r\n    try {\r\n  \r\n      const response = await axios.get('http://localhost:5001/excel', {\r\n        responseType: 'blob', \r\n      });\r\n\r\n      \r\n      const fileBlob = new Blob([response.data]);\r\n\r\n      \r\n      const reader = new FileReader();\r\n      reader.onload = (event) => {\r\n        const binaryStr = event.target.result;\r\n        \r\n        \r\n        const workbook = XLSX.read(binaryStr, { type: 'binary' });\r\n        const sheetName = workbook.SheetNames[0]; \r\n        const worksheet = workbook.Sheets[sheetName];\r\n\r\n        \r\n        const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\r\n        setColumns(jsonData[0]); \r\n        setRows(jsonData.slice(1)); \r\n      };\r\n\r\n      \r\n      reader.readAsBinaryString(fileBlob);\r\n    } catch (error) {\r\n      console.error('Error loading Excel file:', error);\r\n      alert('Failed to load Excel file. Please try again.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"gpt3__whatgpt3 section__margin\" id=\"wgpt3\">\r\n        <h2 class=\"font\">Load Excel Data</h2>\r\n        <button onClick={handleLoadData} class=\"button\">Load Data from Excel</button>\r\n\r\n        {rows.length > 0 && (\r\n          <table className=\"excel-table\">\r\n            <thead>\r\n              <tr>\r\n                {columns.map((col, index) => (\r\n                  <th key={index}>{col}</th>\r\n                ))}\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {rows.map((row, rowIndex) => (\r\n                <tr key={rowIndex}>\r\n                  {row.map((cell, cellIndex) => (\r\n                    <td key={cellIndex}>{cell}</td>\r\n                  ))}\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExcelTable;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}