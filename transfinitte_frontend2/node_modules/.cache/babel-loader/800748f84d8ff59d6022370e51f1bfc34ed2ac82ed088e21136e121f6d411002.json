{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sakth\\\\OneDrive\\\\Desktop\\\\Documents\\\\transfinitte_frontend\\\\src\\\\containers\\\\features\\\\ExcelTable.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport * as XLSX from 'xlsx';\nimport './ExcelTable.css'; // Optional for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExcelTable = () => {\n  _s();\n  const [columns, setColumns] = useState([]);\n  const [rows, setRows] = useState([]);\n\n  // Handle Excel file upload and parse the data\n  const handleFileUpload = e => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n    reader.onload = event => {\n      const binaryStr = event.target.result;\n      const workbook = XLSX.read(binaryStr, {\n        type: 'binary'\n      });\n      const worksheetName = workbook.SheetNames[0];\n      const worksheet = workbook.Sheets[worksheetName];\n      const jsonData = XLSX.utils.sheet_to_json(worksheet, {\n        header: 1\n      }); // Getting data as 2D array\n\n      const cols = jsonData[0]; // The first row as headers\n      const data = jsonData.slice(1); // Remaining rows as data\n\n      setColumns(cols);\n      setRows(data);\n    };\n    reader.readAsBinaryString(file);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gpt3__whatgpt3 section__margin\",\n      id: \"wgpt3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Upload Excel File\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileUpload,\n      accept: \".xlsx, .xls\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), rows.length > 0 && /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"excel-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: columns.map((col, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: col\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: rows.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((cell, cellIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: cell\n          }, cellIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 19\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(ExcelTable, \"RQNKPF5yPTMlIcV115PhRYrjslI=\");\n_c = ExcelTable;\nexport default ExcelTable;\nvar _c;\n$RefreshReg$(_c, \"ExcelTable\");","map":{"version":3,"names":["React","useState","XLSX","jsxDEV","_jsxDEV","ExcelTable","_s","columns","setColumns","rows","setRows","handleFileUpload","e","file","target","files","reader","FileReader","onload","event","binaryStr","result","workbook","read","type","worksheetName","SheetNames","worksheet","Sheets","jsonData","utils","sheet_to_json","header","cols","data","slice","readAsBinaryString","children","className","id","fileName","_jsxFileName","lineNumber","columnNumber","onChange","accept","length","map","col","index","row","rowIndex","cell","cellIndex","_c","$RefreshReg$"],"sources":["C:/Users/sakth/OneDrive/Desktop/Documents/transfinitte_frontend/src/containers/features/ExcelTable.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport * as XLSX from 'xlsx';\r\nimport './ExcelTable.css'; // Optional for styling\r\n\r\nconst ExcelTable = () => {\r\n  const [columns, setColumns] = useState([]);\r\n  const [rows, setRows] = useState([]);\r\n\r\n  // Handle Excel file upload and parse the data\r\n  const handleFileUpload = (e) => {\r\n    const file = e.target.files[0];\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = (event) => {\r\n      const binaryStr = event.target.result;\r\n      const workbook = XLSX.read(binaryStr, { type: 'binary' });\r\n      const worksheetName = workbook.SheetNames[0];\r\n      const worksheet = workbook.Sheets[worksheetName];\r\n      const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 }); // Getting data as 2D array\r\n\r\n      const cols = jsonData[0]; // The first row as headers\r\n      const data = jsonData.slice(1); // Remaining rows as data\r\n\r\n      setColumns(cols);\r\n      setRows(data);\r\n    };\r\n\r\n    reader.readAsBinaryString(file);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"gpt3__whatgpt3 section__margin\" id=\"wgpt3\"></div>\r\n      <h2>Upload Excel File</h2>\r\n      <input type=\"file\" onChange={handleFileUpload} accept=\".xlsx, .xls\" />\r\n\r\n      {rows.length > 0 && (\r\n        <table className=\"excel-table\">\r\n          <thead>\r\n            <tr>\r\n              {columns.map((col, index) => (\r\n                <th key={index}>{col}</th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {rows.map((row, rowIndex) => (\r\n              <tr key={rowIndex}>\r\n                {row.map((cell, cellIndex) => (\r\n                  <td key={cellIndex}>{cell}</td>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExcelTable;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}